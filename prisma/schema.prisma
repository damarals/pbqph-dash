generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model System {
    id        String   @id @default(cuid())
    name      String
    code      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    categories Category[]
    indicators Indicator[]

    @@index([name])
    @@map("systems")
}

model Category {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    systems    System[]
    indicators Indicator[]

    @@index([name])
    @@map("categories")
}

model Impact {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    indicators Indicator[]

    @@index([name])
    @@map("impacts")
}

model ImpactedAgent {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    indicators Indicator[]

    @@index([name])
    @@map("impacted_agents")
}

model IndicatorValue {
    id        String   @id @default(cuid())
    value     Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    indicator   Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
    indicatorId String

    @@map("indicator_values")
}

model Indicator {
    id          String   @id @default(cuid())
    code        String
    name        String
    description String   @default("")
    polarity    String
    cumulative  Boolean
    source      String
    periodicity String
    unit        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    impacts        Impact[]
    impactedAgents ImpactedAgent[]
    values         IndicatorValue[]

    equation            String
    equationDescription String

    stratifiedByOAC     Boolean @default(false)
    stratifiedByRegion  Boolean @default(false)
    stratifiedByCompany Boolean @default(false)
    stratifiedByProject Boolean @default(false)

    system     System   @relation(fields: [systemId], references: [id], onDelete: Cascade)
    systemId   String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String

    @@index([name])
    @@map("indicators")
}

model Company {
    id          String   @id @default(cuid())
    name        String   @unique
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    employees User[]
    projects  Project[]

    @@index([name])
    @@map("companies")
}

model Project {
    id          String   @id @default(cuid())
    name        String   @unique
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String

    @@index([name])
    @@map("projects")
}

enum UserRole {
    SUPER_ADMIN
    ADMIN
    STAFF
    MEMBER
}

model Role {
    id   String   @id @default(cuid())
    role UserRole @unique

    users User[]

    @@map("roles")
}

model User {
    id        String   @id @default(cuid())
    username  String   @unique
    firstName String
    lastName  String?
    password  String
    salt      String
    email     String   @unique
    image     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId    String
    company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String?

    @@map("users")
}
