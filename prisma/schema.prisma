generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model System {
    id        String   @id @default(cuid())
    name      String
    code      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    categories Category[]
    indicators Indicator[]

    @@index([name])
    @@map("systems")
}

model Category {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    systems    System[]
    indicators Indicator[]

    @@index([name])
    @@map("categories")
}

model Impact {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    indicators Indicator[]

    @@index([name])
    @@map("impacts")
}

model Unit {
    id        String   @id @default(cuid())
    name      String   @unique
    code      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    indicators Indicator[]

    @@index([name])
    @@map("units")
}

model Variable {
    id        String   @id @default(cuid())
    name      String
    code      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    formulas Formula[]

    @@index([name])
    @@map("variables")
}

model Formula {
    id        String   @id @default(cuid())
    name      String   @unique
    equation  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    variables Variable[]

    indicator   Indicator @relation(fields: [indicatorId], references: [id])
    indicatorId String    @unique

    @@index([name])
    @@map("formulas")
}

model Indicator {
    id          String   @id @default(cuid())
    code        String
    name        String
    polarity    String
    cumulative  Boolean
    source      String
    periodicity String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    impacts  Impact[]
    equation Formula?

    system     System   @relation(fields: [systemId], references: [id])
    systemId   String
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String
    unit       Unit     @relation(fields: [unitId], references: [id])
    unitId     String

    @@index([name])
    @@map("indicators")
}

// Next auth (don't change)
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    OWNER
    ADMIN
    STAFF
    MEMBER
}

model Role {
    id   String   @id @default(cuid())
    user User[]
    role UserRole @unique @default(MEMBER)
}

model User {
    id            String    @id @default(cuid())
    username      String    @unique
    password      String
    firstName     String
    lastName      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role?     @relation(fields: [roleId], references: [id])
    roleId        String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
